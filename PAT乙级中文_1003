/ ************************

“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。

得到“答案正确”的条件是：

1. 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；
2. 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；
3. 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。

现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。
输入格式： 每个测试输入包含1个测试用例。第1行给出一个自然数n (<10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。

输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。

输入样例：
8
PAT
PAAT
AAPATAA
AAPAATAAAA
xPATx
PT
Whatever
APAAATAA
输出样例：
YES
YES
YES
YES
NO
NO
NO
NO
******************************/
分析如下：
第一，输入的字符串中必须包含PAT。
第二，出现的字符串中，前面的A的个数乘上中间的A的个数等后面的A的A的个数
代码如下：

-------------------华丽的分割现-----------------------------------
import java.util.*;
public class PAT_1003{
	public static void main(String[] args){
		int i,j;
		int len,flag=0;
		int P =0,A =0,T=0,a=0,b=0,c=0;
		Scanner scn=new Scanner(System.in);
		len=scn.nextInt();
		String[] str=new String[len];
		for(i=0;i<str.length;i++){
			str[i]=new String();
			str[i]=new String(scn.next());
		}
		for(i=0;i<str.length;i++){
			for(j=0;j<str[i].length();j++){
				if(str[i].charAt(j)=='P' || str[i].charAt(j)=='A' || str[i].charAt(j)=='T'){
					flag++;
				}
				if(str[i].charAt(j)=='P'){
					P=1;
					a=j;
				}
				if(str[i].charAt(j)=='A'){
					A=1;
				}
				if(str[i].charAt(j)=='T'){
					T=1;
					b=j-a-1;
					c=str[i].length()-j-1;
				}
				
			}
			if(flag==str[i].length() && P==1 && A==1 && T==1  && c==a*b){
				System.out.println("YES");
			}else{
				System.out.println("NO");
			}
			flag=0;
			P=A=T=0;
		}
	}
}
  
  
